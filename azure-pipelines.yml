trigger:
- main  # Se ejecuta cuando hay cambios en la rama principal

pool:
  name: "Agent"  # Nombre del agente autohospedado

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:


  
# üîπ Configurar Python e instalar dependencias desde Artifactory


# üîê Login en JFrog Artifactory para Docker
- task: Docker@2
  displayName: 'Login en JFrog Artifactory'
  inputs:
    containerRegistry: $(ARTIFACTORY_CR)
    command: 'login'


  
# üî® Construcci√≥n de la imagen Docker
- script: |
    export PIP_INDEX_URL=" https://milton:bc1234@@t1234A@devopsm.jfrog.io/artifactory/api/pypi/pypi-local/simple"
    docker build  --build-arg PIP_INDEX_URL=$PIP_INDEX_URL \
    -t $(JFROG_URL)/$(DOCKER_REPOSITORY)/$(IMAGE_NAME):$(IMAGE_TAGE) .
    docker tag $(JFROG_URL)/$(DOCKER_REPOSITORY)/$(IMAGE_NAME):$(IMAGE_TAGE) $(JFROG_URL)/$(DOCKER_REPOSITORY)/$(IMAGE_NAME):$(IMAGE_TAGE)
  displayName: "üöÄ Construir Imagen Docker"



# üì§ Subir la imagen a Artifactory
- script: |
    echo "üì§ Subiendo imagen a Artifactory..."
    docker push $(JFROG_URL)/$(DOCKER_REPOSITORY)/$(IMAGE_NAME):$(IMAGE_TAGE)
  displayName: "Subir imagen a Artifactory"

- script: |
    echo "Imagen publicada: $(ARTIFACTORY_URL)/$(DOCKER_REPOSITORY)/$(IMAGE_NAME):$(IMAGE_TAGE)"
  displayName: 'Mostrar URL de la imagen'

# üßπ Opcional: Limpiar im√°genes locales para liberar espacio
- script: |
    echo "üßπ Limpiando im√°genes locales..."
    docker image prune -f
  displayName: "Limpieza de im√°genes locales"
  condition: succeeded()
